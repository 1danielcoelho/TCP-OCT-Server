/*
To-do list:
3. Adapt transfer methods to handle vector and struct transfer, and also the proper param reconfigs and commands
3.5. Test to see the ordering of transfer data
3.4. Unify clearing vectors

4. How to ROS
4.1. To some tutorials to get the general feel of it. Shouldn't look too much into it
4.2. Try and understand what the OCT_Wrapper and OCT_Segmentation nodes do
4.3. Handle the header ordeal
4.4. Incorporate the OCT_Wrapper code into the node

5. Improvements
5.1. Find out how to control the target area of the scan (Needs lab testing)
5.2. Find out how to set up all the different configurations (Needs lab testing)
5.3. Find out the networks speed at the lab and consider transferring the camera output
5.3.1. JPEG compression?

*/
//#define BOOST_ASIO_ENABLE_HANDLER_TRACKING

#include <iostream>
#include <fstream>
#include <sstream>
#include <string>

#include <boost/array.hpp>
#include <boost/asio.hpp>
#include <boost/bind.hpp>
#include <boost/enable_shared_from_this.hpp>
#include <boost/make_shared.hpp>
#include <boost/shared_ptr.hpp>
#include <boost/lexical_cast.hpp>

#include <Dummy SDOCT.h>

class TCP_Connection : public boost::enable_shared_from_this<TCP_Connection>
{
private:
	boost::asio::ip::tcp::socket m_socket;
	SDOCT m_oct;

	boost::asio::streambuf m_readBuffer;
	std::string m_sendBuffer;
	boost::array<char, 4096> m_sendFillBuffer;
	std::vector<uint8_t> header;

	std::ifstream m_fileStream;
	std::string m_filePath;
	std::string m_fileName;
	uint32_t m_fileSize;

	int m_startTime;
	int m_endTime;

	int m_rollingSum;
	int m_lastPercentage = 0;

	enum
	{
		XRANGE, //0, scanWidth
		YRANGE, //1, scanLength
		ZRANGE, //2, constant value (TODO: Implement interface with the sample table movement control class)
		XSTEPS, //3, imageWidth
		YSTEPS, //4, numOfImagesInFile
		ZSTEPS  //5, imageDepth 
	};

	TCP_Connection(boost::asio::io_service& io_service, SDOCT& oct) : m_socket(io_service), m_oct(oct)
	{
		std::cout << "New connection\n";
	}

public:
	//Creates a shared pointer to a TCP_Connection object. Note that all async handlers should be passed the shared_from_this() pointer instead of just 'this', or the TCP_Connection object will go out of scope while waiting for the handler to return
	static boost::shared_ptr<TCP_Connection> create(boost::asio::io_service& io_service, SDOCT& oct)
	{
		return boost::shared_ptr<TCP_Connection>(new TCP_Connection(io_service, oct));
	}

	//Returns it's own socket object. Inside the class we just access the member variable directly for shorter syntax
	boost::asio::ip::tcp::socket& socket()
	{
		return m_socket;
	}

	//Server begins listening for messages on the socket
	void start()
	{
		boost::asio::async_read_until(m_socket, m_readBuffer,
			'\0',
			boost::bind(&TCP_Connection::handle_read_data,
			shared_from_this(),
			boost::asio::placeholders::error
			)
			);
	}

	//Called when async_read_until completes
	void handle_read_data(const boost::system::error_code& error)
	{
		if (error.value() == 104)
		{
			std::cout << "Client disconnected" << std::endl;
			return;
		}
		else if (error)
		{
			std::cout << "handle_read_data exception: " << error.message() << std::endl;
			return;
		}

		//Pops and parses lines from the m_readBuffer individually
		std::string line;
		std::istream is(&m_readBuffer);
		while (!is.eof())
		{
			std::getline(is, line);
			std::cout << "Received: \"" << line << "\"\n";
			shared_from_this()->parse_data(line);
		}
	}

	void parse_data(const std::string& line)
	{
		try
		{
			int variableIndex = 0;
			std::string valueString = "";
			float convertedFloat = 0.0f;
			uint32_t convertedInt = 0;

			//Parses the first character of the message
			switch (line[0])
			{
				//Received an 'I' message: Initialize the oct device
			case 'I':
			{
						if (line.size() != 2 || line[1] != 0) throw "whoops!";
						m_oct.Init();
						shared_from_this()->send_char("A");
						return;
			}

				//Received a 'C' message: Change one of the oct properties variables 
			case 'C':
			{
						//Recovers the "01" into an int. Throws exception in case of error
						variableIndex = stoi((line.substr(1, 2)));

						//Locates the position of the substring that holds the new value
						valueString = line.substr(4, line.length() - 4);

						//Extract the value from the string, parsing the rest of the message
						switch (line[3])
						{
						case 'F':
							//Converts the float from a string. Throws exception in case of error
							convertedFloat = stof(valueString);
							if (variableIndex == XRANGE) m_oct.setXRange(convertedFloat);
							else if (variableIndex == YRANGE) m_oct.setYRange(convertedFloat);
							else if (variableIndex == ZRANGE) m_oct.setZRange(convertedFloat);

							shared_from_this()->send_char("A");
							return;
						case 'I':
							//Converts the int from a string. Throws exception in case of error
							convertedInt = stoi(valueString);
							if (variableIndex == XSTEPS) m_oct.setXSteps(convertedInt);
							else if (variableIndex == YSTEPS) m_oct.setYSteps(convertedInt);
							else if (variableIndex == ZSTEPS) m_oct.setZSteps(convertedInt);

							shared_from_this()->send_char("A");
							return;
						}
						//Fell off the inner switch, the fourth char is not F or I:
						throw "whoops!";
			}

				//Received a 'V' message: Perform and return a volume scan 
			case 'V':
			{
						m_rollingSum = 0;
						m_sendFillBuffer[2048] = { 0 };
						shared_from_this()->prepare_header(header);

						//Requested volumetric data
						boost::system::error_code error;

						//Appends the voxel data to the header uint8_t vector
						m_oct.captureVolScan(header);

						//Assuming header has byte long elements
						m_fileSize = header.size();

						//Send the info string. Completion handler leads to the handle_send_file function
						m_sendBuffer = "V";
						m_socket.async_send(boost::asio::buffer(m_sendBuffer.c_str(),
							m_sendBuffer.length()
							),
							boost::bind(&TCP_Connection::handle_send_file_info,
							shared_from_this(),
							boost::asio::placeholders::error
							)
							);
						m_startTime = time(0);

						return;
			}

				//Received a 'G' message: Get and return one of the oct properties variables
			case 'G':
			{
						//Recovers the "01" into an int. Throws exception in case of error
						variableIndex = stoi((line.substr(1, 2)));

						std::cout << "vindex: " << variableIndex << std::endl;

						//Case where the desired variable is a float
						if (variableIndex == XRANGE || variableIndex == YRANGE || variableIndex == ZRANGE)
						{
							float fetched;

							if (variableIndex == XRANGE) fetched = m_oct.getXRange();
							else if (variableIndex == YRANGE) fetched = m_oct.getYRange();
							else if (variableIndex == ZRANGE) fetched = m_oct.getZRange();
							else throw "whoops!";

							//Makes sure the response string has 5 bytes allocated
							m_sendBuffer = "R    ";

							//copies 4 bytes to the pre-allocated send buffer
							memcpy(&m_sendBuffer[1], &fetched, sizeof(float));

							m_socket.async_send(boost::asio::buffer(m_sendBuffer.c_str(),
								m_sendBuffer.length()
								),
								boost::bind(&TCP_Connection::handle_send_data,
								shared_from_this(),
								boost::asio::placeholders::error
								)
								);
							return;
						}

						//Case where the desired variable is an int
						else if (variableIndex == XSTEPS || variableIndex == YSTEPS || variableIndex == ZSTEPS)
						{
							uint32_t fetched;

							if (variableIndex == XSTEPS) fetched = m_oct.getXSteps();
							else if (variableIndex == YSTEPS) fetched = m_oct.getYSteps();
							else if (variableIndex == ZSTEPS) fetched = m_oct.getZSteps();
							else throw "whoops!";

							//Makes sure the response string has 5 bytes allocated
							m_sendBuffer = "r    ";

							//copies 4 bytes to the pre-allocated send buffer
							memcpy(&m_sendBuffer[1], &fetched, sizeof(uint32_t));

							m_socket.async_send(boost::asio::buffer(m_sendBuffer.c_str(),
								m_sendBuffer.length()
								),
								boost::bind(&TCP_Connection::handle_send_data,
								shared_from_this(),
								boost::asio::placeholders::error
								)
								);
							return;
						}
			}

			case 'B':
			{
						//TODO: Requested B-Mode 
			}

			}//Closes switch

			//Fell off the switch
			throw "whoops!";

		}//Closes try block
		catch (...)
		{
			//Respond with a 'F' char, indicating an exception was thrown
			shared_from_this()->send_char("F");
			return;
		}
	}

	void prepare_header(std::vector<uint8_t>& header)
	{
		header.clear();
		header.reserve(512);

		//Header size is 512 bytes in total. "Allocate" them here by pushing back NULLs into the vector
		for (int i = 0; i < 512; i++)
		{
			header.push_back(NULL);
		}

		/*uint32_t numOfImagesInFile = 100000;
		uint32_t imageWidth = 1;
		uint32_t imageDepth = 1;
		float scanWidth = 12345.6789;
		float scanLength = 12345.6789;*/

		//Fetch the current parameters from the oct scanner to build the header. Only these parameters are used by the client application, but the 512 byte size is kept in case other parameters start being used in the future
		uint32_t numOfImagesInFile = m_oct.getYSteps();
		uint32_t imageWidth = m_oct.getXSteps();
		uint32_t imageDepth = m_oct.getZSteps();
		float scanWidth = m_oct.getXRange();
		float scanLength = m_oct.getYRange();

		//Copy the necessary header variables into the header vector
		memcpy(&header[16], &numOfImagesInFile, sizeof(uint32_t));
		memcpy(&header[20], &imageWidth, sizeof(uint32_t));
		memcpy(&header[24], &imageDepth, sizeof(uint32_t));
		memcpy(&header[72], &scanWidth, sizeof(float));
		memcpy(&header[76], &scanLength, sizeof(float));
	}

	//Gets called when the file info gets sent. Sends the file content
	void handle_send_file_info(const boost::system::error_code& error)
	{
		//Does this need to be in an infinite for loop?
		if (!error)
		{
			if (m_rollingSum <= m_fileSize)
			{
				//Copy (exclusively) the file data into the send buffer
				memcpy(&m_sendFillBuffer, &header[m_rollingSum],
					min(m_sendFillBuffer.size(), m_fileSize - m_rollingSum));

				boost::asio::async_write(m_socket, boost::asio::buffer(m_sendFillBuffer,
					min(m_sendFillBuffer.size(), m_fileSize - m_rollingSum)
					),
					boost::bind(&TCP_Connection::handle_send_file_info,
					shared_from_this(),
					boost::asio::placeholders::error
					)
					);
				m_rollingSum += m_sendFillBuffer.size();
			}
			else
			{
				std::cout << "File transfer complete!\n";
				std::cout << m_fileSize << " " << header.size() << "\n\n";

				for (int i = 0; i < 512; i++)
				{
					std::cout << (int)((unsigned char)header[i]) << " ";
				}

				std::cout << "\nThat was the headers\n";

				for (int i = header.size() - 100; i < header.size(); i++)
				{
					std::cout << (int)((unsigned char)header[i]) << " ";
				}

				m_endTime = time(0);
				float diff = m_endTime - m_startTime;
				std::cout << "Total time: " << diff << " s. Speed: " << (((float)m_fileSize) / diff) * (1 / 1024.0f) << " KBps " << std::endl;
				header.clear();

				boost::asio::async_read_until(m_socket, m_readBuffer, '\0',
					boost::bind(&TCP_Connection::handle_read_data,
					shared_from_this(),
					boost::asio::placeholders::error
					)
					);
			}
		}
		else
		{
			std::cout << "handle_send_file_info exception: " << error.message() << "\n";
		}
	}


	void send_char(const char* letter)
	{
		m_sendBuffer = letter;

		m_socket.async_send(boost::asio::buffer(m_sendBuffer.c_str(),
			m_sendBuffer.length()
			),
			boost::bind(&TCP_Connection::handle_send_data,
			shared_from_this(),
			boost::asio::placeholders::error
			)
			);
	}

	void handle_send_data(const boost::system::error_code& error)
	{
		std::cout << "To client:\n" << m_sendBuffer << std::endl;

		if (error)
		{
			std::cout << "handle_send_data exception: " << error.message() << std::endl;
			return;
		}

		boost::asio::async_read_until(m_socket, m_readBuffer, '\0',
			boost::bind(&TCP_Connection::handle_read_data,
			shared_from_this(),
			boost::asio::placeholders::error
			)
			);
	}
};

//=================================================================================================================================

class TCP_Server
{
private:
	//Shortens this absolutely ridiculous syntax in a small amount 
	typedef boost::asio::ip::tcp tcp;
	tcp::acceptor m_acceptor;
	SDOCT &m_oct;

public:
	//Constructs the acceptor and sockets with the proper input from the class constructor. Should only deal with IPv4 at the specific port
	TCP_Server(boost::asio::io_service& service, SDOCT& oct) : m_acceptor(service, tcp::endpoint(tcp::v4(), 12345)), m_oct(oct)
	{
		std::cout << "New server\n";
		boost::asio::ip::tcp::no_delay opt_nodelay(true);
		m_acceptor.set_option(opt_nodelay);
		do_accept();
	}

private:
	void do_accept()
	{
		boost::shared_ptr<TCP_Connection> new_connection = TCP_Connection::create(m_acceptor.get_io_service(), this->m_oct);

		m_acceptor.async_accept(new_connection->socket(), boost::bind(&TCP_Server::handle_accept, this, new_connection, boost::asio::placeholders::error));
	}
	//Completion handler for async_accept

	void handle_accept(boost::shared_ptr<TCP_Connection> new_connection, const boost::system::error_code& error)
	{
		if (error)
		{
			std::cout << "handle_accept exception: " << error.message() << std::endl;
		}
		else
		{
			std::cout << "New client connected" << std::endl;
			//Reads data. Calls handle_read_data when complete
			new_connection->socket().set_option(boost::asio::ip::tcp::no_delay(true));
			new_connection->start();
		}
		do_accept();
	}
};


//===============================================================================================================================

int main()
{
	boost::asio::io_service service;
	SDOCT oct;

	TCP_Server server(service, oct);

	//SDOCT oct;
	//Needs to be passed to the server/connection
	//oct.Init(); is called to initialize it
	//this->oct.setVolScanProp(10,100,10,100); sets some configs apparently
	/*This calls volumetric data

	oct_volume oct_vol;

	std::vector<unsigned long> test = this->oct.captureVolScan();

	std::cout << "Elements:" << test.size() << std::endl;

	//Write current config to struct
	this->oct.getConfig(oct_vol.x_range,oct_vol.y_range,oct_vol.x_steps,oct_vol.y_steps);
	short *temp;
	this->oct.getVolume(temp);

	memcpy(temp,oct_vol.data,2*sizeof(short));

	test.clear();
	*/

	service.run();
}